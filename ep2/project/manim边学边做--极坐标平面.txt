标题: manim边学边做--极坐标平面
作者: wang_yb
发布时间: 
2024-10-24 09:00

阅读数量: 161

PolarPlane，顾名思义，是用于创建极坐标平面的类。
与笛卡尔坐标系不同，极坐标系是基于角度和半径来定位点的，这里的每个点由一个角度和距离原点的距离表示。
在Manim中，PolarPlane通过极径（$ r\(）和极角（\)\theta $）来展示坐标系，这种表示方式便于处理与角度和半径相关的数学概念。
无论是坐标系网格，还是坐标的标记，PolarPlane都提供了直观的展示方式。
PolarPlane一般用于展示极函数、幅角等极坐标相关的数学概念。
极坐标系的参数和之前介绍的直角坐标系差别很大，主要参数如下：
上面的参数有几个需要补充说明一下，
一个是azimuth_units参数，表示方位角的单位，它的值固定为以下5种：
还有azimuth_direction参数，它的值有2种：
PolarPlane也继承了坐标系统CoordinateSystem类的方法，
其中，常用的是以下2个方法：
下面通过示例展示如何使用PolarPlane的参数和方法来创建和自定义极坐标平面。
3.1. 基本极坐标平面
这个示例创建了一个基本的极坐标平面，没有过多的自定义设置。
只是启用了add_coordinates方法来显示坐标轴和刻度标签。
plane = PolarPlane()
plane.add_coordinates()
3.2. 自定义角度单位和范围
这个示例先创建一个极坐标平面，然后对其角度单位和范围进行了自定义。
我们设置不同的azimuth_units和azimuth_step的值来更改角度刻度的单位和间隔，使其更加密集或稀疏，以适应不同的展示需求。
# 角度作为刻度
plane1 = PolarPlane(
    azimuth_units="degrees",
    azimuth_step=12,
)
plane1.add_coordinates()

# 弧度作为刻度
plane2 = PolarPlane(
    azimuth_units="PI radians",
    azimuth_step=10,
)
plane2.add_coordinates()

# 梯度作为梯度
plane3 = PolarPlane(
    azimuth_units="gradians",
    azimuth_step=20,
)
plane3.add_coordinates()
上图分别用不同的刻度（角度，弧度和梯度）和间隔（12，10，20）展示了极坐标系。
3.3. 自定义极坐标样式
这个示例演示如何通过PolarPlane的background_line_style参数和faded_line_style参数来控制极坐标系的背景线和淡化线的显示效果。
线的颜色，粗细都可以根据显示需要灵活调整。
plane1 = PolarPlane(
    background_line_style={
        "stroke_color": RED,
        "stroke_width": 2,
        "stroke_opacity": 0.5,
    },
)

plane2 = PolarPlane(
    background_line_style={
        "stroke_color": YELLOW,
        "stroke_width": 4,
        "stroke_opacity": 0.5,
    },
    faded_line_style={
        "stroke_color": GREY,
        "stroke_width": 2,
        "stroke_opacity": 0.3,
    },
    faded_line_ratio=2,
)

plane3 = PolarPlane(
    background_line_style={
        "stroke_color": GREEN,
        "stroke_width": 2,
    },
    faded_line_style={
        "stroke_color": TEAL,
        "stroke_width": 1,
        "stroke_opacity": 0.6,
    },
    faded_line_ratio=2,
)
3.4. 极坐标函数图像
在这个示例中，我们利用PolarPlane的plot_polar_graph方法来在极坐标系中绘制函数图像。
通过函数：$ y=f(\theta)=3\times \sin(6\theta) $绘制一个花瓣的图案；
通过函数：$ y=f(\theta) =2.5\times (1-\sin(\theta)) $绘制一个爱心的图案。
plane = PolarPlane(size=4)

# 花瓣
r = lambda theta: 3 * np.sin(theta * 6)
graph1 = plane.plot_polar_graph(r, [0, 2 * PI], color=YELLOW)

# 爱心
r = lambda theta: 2.5 * (1 - np.sin(theta))
graph2 = plane.plot_polar_graph(r, [0, 2 * PI], color=RED)
文中的代码只是关键部分的截取，完整的代码共享在网盘中（polar_plane.py），
下载地址:完整代码(访问密码: 6872)
公告
